<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/douziNotes.github.io/%E6%8A%80%E6%9C%AF/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="hello-hexo-today-is-2020-10-20"><a href="#hello-hexo-today-is-2020-10-20" class="headerlink" title="hello hexo today is 2020-10-20"></a>hello hexo today is 2020-10-20</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记</title>
    <url>/douziNotes.github.io/Java/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>#Java学习笔记</p>
<hr>
<p>##第一章：Java的基本程序设计结构<br>###1.1 注释<br>Java的注释有三种，第一种是单行注释 <code>//</code>,第二种是多行注释 <code>/* */</code>，第三种可以用来自动地生成文档，以 <code>/**</code> 开头，以 <code>*/</code>结尾。</p>
<hr>
<p>###1.2 数据类型<br>Java是一种强类型语言，必须为每一个变量声明一种类型。<br>Java中一共有8种基本类型：4种整形，2种浮点类型，1种字符类型、一种用于表示真值的<code>boolean</code>类型。<br>####1.2.1 整形<br>整形用于表示没有小数部分的数值，允许是负数。<br>表1：Java整形<br>| 类型 | 存储需求 | 取值范围 |<br>| — | —| —|<br>| int | 4字节 | -2147483648<del>2147483647|<br>| short | 2字节 | -32768</del>32767|<br>|long | 8字节 | 太长了|<br>|byte | 1字节| -128~127|<br>长整形数值有一个后缀L或者l;<br>十六进制数值有一个前缀0x或者0X；八进制有一个前缀0。<br><strong>Java没有无符号形式的整形。</strong><br>####1.2.2 浮点类型<br>浮点类型用于表示小数部分的数值。<br>表2：Java浮点类型<br>| 类型 | 存储需求 | 其他|<br>|—|—|—|<br>|float| 4字节 |单精度|<br>|double| 8字节|双精度|<br><strong>浮点类型的数值有一个F或者f的后缀，没有后缀的默认是double类型，或者有D或d的后缀。</strong><br>####1.2.3 char类型<br>char类型原本用于表示单个字符；<br>char类型的字面量值要用单引号括起来，eg：’A’是编码值为65的字符常量，与”A”不同（它是一个字符串）<br>表3：特殊字符的转义序列<br>| 转义序列 | 名称 |<br>|—|—|<br>|<code>\b</code>|退格|<br>|<code>\t</code>|制表|<br>|<code>\n</code>|换行|<br>|<code>\r</code>|回车|<br>|<code>\&quot;</code>|双引号|<br>|<code>\&#39;</code>|单引号|<br>|<code>\\</code>|反斜杠|<br>####1.2.4 boolean类型<br>布尔类型有两个值：false和true，用于判定逻辑条件。<br><strong>整形值与布尔值之间不能进行相互转换，这与c++中不一样。</strong></p>
<hr>
<p>###1.3 变量与常量<br>####1.3.1 声明变量<br>声明变量的格式：<code>变量类型 变量名;</code><br><strong>注：必须以分号结尾</strong><br>变量名的构成：</p>
<ul>
<li>变量名是以字母开头并由字母或数字构成的序列；</li>
<li>字母包括’A’-‘Z’，’a’-‘z’，’_’ ，’$’；</li>
<li>不能使用Java中的保留字作为变量名；</li>
<li>单下划线不能用作变量名。<br>####1.3.2 初始化变量<br>使用赋值语句对变量进行显式的初始化。<br>eg：<br><code>int i;</code><br><code>i=0;</code><br>####1.3.3 常量<br>在Java中，利用关键字<code>final</code>指示常量。<br>对于<code>final</code>修饰的变量只能赋值一次，一旦赋值之后进不能再更改了。<br>习惯上，常量名使用全大写。<br>类常量：使用关键字：<code>static final</code>设置一个类常量，可以在一个类的多种方法中被使用。<strong>注意类常量定义在<code>main</code>函数的外面。</strong><br>####1.3.4 枚举类型<br>有时候变量的取值在一个有限的集合内，这时可以自定义枚举类型，枚举类型包括有限个命名的值。<br>eg：<code>enum Size&#123;SMALL,MEDIUM,LARGE&#125;;</code>，然后可以声明枚举类型的变量：<code>Size s = Size.SMALL;</code>。</li>
</ul>
<hr>
<p>###1.4 运算符<br>####1.4.1 算术运算符<br>|运算符|名称|<br>|—|—|<br>|+|加|<br>|-|减|<br>|*|乘|<br>|/|除|<br>|%|取余|</p>
<p><strong>在Java中的<code>Math</code>类中包含了各式各样的数学函数</strong><br>####1.4.2 数值类型之间的转换<br><img src="E:\Pictures\1.jpg" alt="图1："><br>实线箭头表示没有信息丢失的转换，虚线箭头表示可能有精度损失的转换。<br>####1.4.3 强制类型转换<br>强制类型转换的格式是在圆括号中给出想要转换的目标类型，，后面紧跟待转换的变量名。<br>eg<code> double x = 9.997; int y = (int)x;</code><br>####1.4.4 其他运算符</p>
<ol>
<li>自增自减运算符 i++和++i：<br>i++是先将i的值赋值给变量，然后进行i+1；</li>
</ol>
<p>++i是先对i进行加1，然后赋值给其他变量。<br>自减同理。<br>2. 关系和Boolean运算符<br><code>&lt;,&gt;,&lt;=,&gt;=,==,!=</code><br><code>&amp;&amp;逻辑与 ||逻辑或</code><br><code>?:运算符</code><br>3. 位运算符<br>   <code>&amp; and, | or ,^ xor, ~ not</code></p>
<hr>
<p>###1.5 字符串<br>Java没有内置的字符串类型，而是在标准Java类库里面提供了一个预定义的类String。</p>
<ol>
<li>子串<br><code>String</code>类的<code>substring</code>方法可以从一个较大的字符串提取一个子串，eg：<code>String g = &quot;hello&quot;;</code><br><code>String s = g.substring(0,3);</code><br>结果是：<code>hel</code>，从0开始到3为止，不含3。</li>
<li>拼接<br>Java允许使用+连接两个字符串。</li>
<li>检测字符串是否相等<br>使用<code>equals</code>方法检测两个字符串是否相等，返回<code>true</code>或者<code>false</code>。<br>不区分大小写使用方法<code>equalsIgnoreCase</code>方法。</li>
<li>空串与null串<br>空串是长度为零的字符串<code>&quot;&quot;</code>;<br>null串：要检查一个字符串是否为null 要使用：<code>if(str == null)</code>。</li>
<li>API<br>好多好多。。。</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
</search>
