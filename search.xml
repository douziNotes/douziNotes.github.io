<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 学习笔记-第二章</title>
    <url>/douziNotes.github.io/Java/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第二章-对象与类"><a href="#第二章-对象与类" class="headerlink" title="第二章 对象与类"></a>第二章 对象与类</h2><h3 id="4-1-面向对象编程oop"><a href="#4-1-面向对象编程oop" class="headerlink" title="4.1 面向对象编程oop"></a>4.1 面向对象编程oop</h3><h4 id="4-1-1-类"><a href="#4-1-1-类" class="headerlink" title="4.1.1 类"></a>4.1.1 类</h4><p>类是构造对象的模板或蓝图，由类构造对象的过程称为创建类的实例。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习笔记</title>
    <url>/douziNotes.github.io/Java/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Java学习笔记"><a href="#Java学习笔记" class="headerlink" title="Java学习笔记"></a>Java学习笔记</h1><hr>
<h2 id="第一章：Java的基本程序设计结构"><a href="#第一章：Java的基本程序设计结构" class="headerlink" title="第一章：Java的基本程序设计结构"></a>第一章：Java的基本程序设计结构</h2> <a id="more"></a>

<h3 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h3><p>Java的注释有三种，第一种是单行注释 <code>//</code>,第二种是多行注释 <code>/* */</code>，第三种可以用来自动地生成文档，以 <code>/**</code> 开头，以 <code>*/</code>结尾。</p>
<hr>
<h3 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h3><p>Java是一种强类型语言，必须为每一个变量声明一种类型。<br>Java中一共有8种基本类型：4种整形，2种浮点类型，1种字符类型、一种用于表示真值的<code>boolean</code>类型。</p>
<h4 id="1-2-1-整形"><a href="#1-2-1-整形" class="headerlink" title="1.2.1 整形"></a>1.2.1 整形</h4><p>整形用于表示没有小数部分的数值，允许是负数。<br>表1：Java整形</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4字节</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>太长了</td>
</tr>
<tr>
<td>byte</td>
<td>1字节</td>
<td>-128~127</td>
</tr>
<tr>
<td>长整形数值有一个后缀L或者l;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>十六进制数值有一个前缀0x或者0X；八进制有一个前缀0。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Java没有无符号形式的整形。</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-2-2-浮点类型"><a href="#1-2-2-浮点类型" class="headerlink" title="1.2.2 浮点类型"></a>1.2.2 浮点类型</h4><p>浮点类型用于表示小数部分的数值。<br>表2：Java浮点类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>单精度</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>双精度</td>
</tr>
<tr>
<td><strong>浮点类型的数值有一个F或者f的后缀，没有后缀的默认是double类型，或者有D或d的后缀。</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-2-3-char类型"><a href="#1-2-3-char类型" class="headerlink" title="1.2.3 char类型"></a>1.2.3 char类型</h4><p>char类型原本用于表示单个字符；<br>char类型的字面量值要用单引号括起来，eg：’A’是编码值为65的字符常量，与”A”不同（它是一个字符串）<br>表3：特殊字符的转义序列</p>
<table>
<thead>
<tr>
<th>转义序列</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td><code>\b</code></td>
<td>退格</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠</td>
</tr>
</tbody></table>
<h4 id="1-2-4-boolean类型"><a href="#1-2-4-boolean类型" class="headerlink" title="1.2.4 boolean类型"></a>1.2.4 boolean类型</h4><p>布尔类型有两个值：false和true，用于判定逻辑条件。<br><strong>整形值与布尔值之间不能进行相互转换，这与c++中不一样。</strong></p>
<hr>
<h3 id="1-3-变量与常量"><a href="#1-3-变量与常量" class="headerlink" title="1.3 变量与常量"></a>1.3 变量与常量</h3><h4 id="1-3-1-声明变量"><a href="#1-3-1-声明变量" class="headerlink" title="1.3.1 声明变量"></a>1.3.1 声明变量</h4><p>声明变量的格式：<code>变量类型 变量名;</code><br><strong>注：必须以分号结尾</strong><br>变量名的构成：</p>
<ul>
<li>变量名是以字母开头并由字母或数字构成的序列；</li>
<li>字母包括’A’-‘Z’，’a’-‘z’，’_’ ，’$’；</li>
<li>不能使用Java中的保留字作为变量名；</li>
<li>单下划线不能用作变量名。<h4 id="1-3-2-初始化变量"><a href="#1-3-2-初始化变量" class="headerlink" title="1.3.2 初始化变量"></a>1.3.2 初始化变量</h4>使用赋值语句对变量进行显式的初始化。<br>eg：<br><code>int i;</code><br><code>i=0;</code><h4 id="1-3-3-常量"><a href="#1-3-3-常量" class="headerlink" title="1.3.3 常量"></a>1.3.3 常量</h4>在Java中，利用关键字<code>final</code>指示常量。<br>对于<code>final</code>修饰的变量只能赋值一次，一旦赋值之后进不能再更改了。<br>习惯上，常量名使用全大写。<br>类常量：使用关键字：<code>static final</code>设置一个类常量，可以在一个类的多种方法中被使用。<strong>注意类常量定义在<code>main</code>函数的外面。</strong><h4 id="1-3-4-枚举类型"><a href="#1-3-4-枚举类型" class="headerlink" title="1.3.4 枚举类型"></a>1.3.4 枚举类型</h4>有时候变量的取值在一个有限的集合内，这时可以自定义枚举类型，枚举类型包括有限个命名的值。<br>eg：<code>enum Size&#123;SMALL,MEDIUM,LARGE&#125;;</code>，然后可以声明枚举类型的变量：<code>Size s = Size.SMALL;</code>。</li>
</ul>
<hr>
<h3 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4 运算符"></a>1.4 运算符</h3><h4 id="1-4-1-算术运算符"><a href="#1-4-1-算术运算符" class="headerlink" title="1.4.1 算术运算符"></a>1.4.1 算术运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
</tr>
</tbody></table>
<p><strong>在Java中的<code>Math</code>类中包含了各式各样的数学函数</strong></p>
<h4 id="1-4-2-数值类型之间的转换"><a href="#1-4-2-数值类型之间的转换" class="headerlink" title="1.4.2 数值类型之间的转换"></a>1.4.2 数值类型之间的转换</h4><p><img src="/douziNotes.github.io/Java/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Pictures/1.jpg" alt="图1："><br>实线箭头表示没有信息丢失的转换，虚线箭头表示可能有精度损失的转换。</p>
<h4 id="1-4-3-强制类型转换"><a href="#1-4-3-强制类型转换" class="headerlink" title="1.4.3 强制类型转换"></a>1.4.3 强制类型转换</h4><p>强制类型转换的格式是在圆括号中给出想要转换的目标类型，，后面紧跟待转换的变量名。<br>eg<code> double x = 9.997; int y = (int)x;</code></p>
<h4 id="1-4-4-其他运算符"><a href="#1-4-4-其他运算符" class="headerlink" title="1.4.4 其他运算符"></a>1.4.4 其他运算符</h4><ol>
<li>自增自减运算符 i++和++i：<br>i++是先将i的值赋值给变量，然后进行i+1；</li>
</ol>
<p>++i是先对i进行加1，然后赋值给其他变量。<br>自减同理。<br>2. 关系和Boolean运算符<br><code>&lt;,&gt;,&lt;=,&gt;=,==,!=</code><br><code>&amp;&amp;逻辑与 ||逻辑或</code><br><code>?:运算符</code><br>3. 位运算符<br>   <code>&amp; and, | or ,^ xor, ~ not</code></p>
<hr>
<h3 id="1-5-字符串"><a href="#1-5-字符串" class="headerlink" title="1.5 字符串"></a>1.5 字符串</h3><p>Java没有内置的字符串类型，而是在标准Java类库里面提供了一个预定义的类String。</p>
<ol>
<li>子串<br><code>String</code>类的<code>substring</code>方法可以从一个较大的字符串提取一个子串，eg：<code>String g = &quot;hello&quot;;</code><br><code>String s = g.substring(0,3);</code><br>结果是：<code>hel</code>，从0开始到3为止，不含3。</li>
<li>拼接<br>Java允许使用+连接两个字符串。</li>
<li>检测字符串是否相等<br>使用<code>equals</code>方法检测两个字符串是否相等，返回<code>true</code>或者<code>false</code>。<br>不区分大小写使用方法<code>equalsIgnoreCase</code>方法。</li>
<li>空串与null串<br>空串是长度为零的字符串<code>&quot;&quot;</code>;<br>null串：要检查一个字符串是否为null 要使用：<code>if(str == null)</code>。</li>
<li>API<br>好多好多。。。</li>
</ol>
<hr>
<h3 id="1-6-输入输出"><a href="#1-6-输入输出" class="headerlink" title="1.6 输入输出"></a>1.6 输入输出</h3><h4 id="1-6-1-读取输入"><a href="#1-6-1-读取输入" class="headerlink" title="1.6.1 读取输入"></a>1.6.1 读取输入</h4><p>“标准输入流”<code>System.in</code>使用时首先需要构造一个与标准输入流关联的Scanner对象。<code>eg:Scanner in = new Scanner(System.in);</code>，然后就可以使用scanner类的各种方法进行读取输入了。<br><code>nextLine方法将读取一行输入； nextInt读取一个整数 nextDouble读取下一个浮点数</code></p>
<h4 id="1-6-2-格式化输出"><a href="#1-6-2-格式化输出" class="headerlink" title="1.6.2 格式化输出"></a>1.6.2 格式化输出</h4><p>Java5沿用了c语言函数库中的printf方法。<br>可以使用静态的String.format方法创建一个格式化的字符串，而不打印输出。</p>
<h4 id="1-6-3文件的输入与输出"><a href="#1-6-3文件的输入与输出" class="headerlink" title="1.6.3文件的输入与输出"></a>1.6.3文件的输入与输出</h4><p>要想读取一个文件，需要构建一个scanner对象，<code>eg:Scanner in = new Scanner(path.of(&quot;myfile.txt&quot;),StandardCharsets.UTF_8);</code><br><strong>如果文件名中包含反斜杠符号，就要在每个反斜杠前加一个反斜杠转义。</strong><br>要想写入文件，就需要构建一个PrintWriter对象，在构建器中需要提供文件名和字符编码。<br><code>eg: PrintWriter out = new PrintWriter(&quot;myfile.txt,StandardCharsets.UTF_8&quot;);</code><br>如果文件不存在，就创建文件。</p>
<hr>
<h3 id="1-7-数组"><a href="#1-7-数组" class="headerlink" title="1.7 数组"></a>1.7 数组</h3><h4 id="1-7-1-声明数组"><a href="#1-7-1-声明数组" class="headerlink" title="1.7.1 声明数组"></a>1.7.1 声明数组</h4><p>在声明数组时需要指明数组的类型和变量名，<code>eg：int []a;</code><br>使用new操作符创建数组：<br><code>int []a = new int[100];</code><br><strong>数组长度不要求是常量：<code>new int[n]会创建一个长度为n的数组</code></strong><br>如果需要扩展数组的大小，就需要使用另一种数据结构——数组列表。<br>也可以使用<code>int []a = &#123;1,2,3,4&#125;;</code>这种形式来创建数组并同时初始化，这种方法不需要new，甚至不需要指明数组长度。而且<strong>最后一个值后面允许有逗号</strong></p>
<h4 id="1-7-2-访问数组元素"><a href="#1-7-2-访问数组元素" class="headerlink" title="1.7.2 访问数组元素"></a>1.7.2 访问数组元素</h4><p>获取数组中的元素个数可以使用<code>array.length;</code>.<br>根据下标访问数组元素。<br><code>for each循环</code><br><code>eg: for( int element : a) System.out.println(element); 读作“循环a中的每一个元素”</code><br>该语句的循环变量将会遍历数组中的每个元素，而不是下标。</p>
<h4 id="1-7-3-数组拷贝"><a href="#1-7-3-数组拷贝" class="headerlink" title="1.7.3 数组拷贝"></a>1.7.3 数组拷贝</h4><p><strong>在Java中，允许讲一个数组变量拷贝到另一个数组变量。这时两个变量将引用同一个数组。</strong><br><code>eg: int []a = b;</code><br>将一个数组中的所有值拷贝到另一个数组就需要使用arrays类的<code>copyOf</code>方法。<br><code>int a = Arrays.copyOf(b,b.length);</code><br><strong>数组排序使用Arrays类中的sort方法。</strong></p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
</search>
